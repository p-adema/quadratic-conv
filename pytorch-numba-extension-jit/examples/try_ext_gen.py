from __future__ import annotations

import pytorch_numba_extension_jit as pnex_jit
import torch
from numba import cuda

run_hardcoded_ptx = True
run_jit_ptx = True

if run_hardcoded_ptx:
    test_ptx = """
    //
    // Generated by NVIDIA NVVM Compiler
    //
    // Compiler Build ID: CL-35404655
    // Cuda compilation tools, release 12.8, V12.8.61
    // Based on NVVM 7.0.1
    //

    .version 8.7
    .target sm_90
    .address_size 64

        // .globl    _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__errcode__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__tidx__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__ctaidx__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__tidy__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__ctaidy__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__tidz__;
    .visible .global .align 4 .u32 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE__ctaidz__;
    .common .global .align 8 .u64 _ZN08NumbaEnv8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE;

    .visible .entry wfbhrehiuwghwerjhvbfwejfgwehjbc(
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_0,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_1,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_2,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_3,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_4,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_5,
        .param .u64 _ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_6
    )
    {
        .reg .pred     %p<4>;
        .reg .b32     %r<6>;
        .reg .b64     %rd<11>;


        ld.param.u64     %rd4, [_ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_2];
        ld.param.u64     %rd2, [_ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_4];
        ld.param.u64     %rd3, [_ZN6cudapy8__main__8test_addB3v27B94cw51cXTLSUwv1sCUt9UwNNJRMNDUUUDyoy04_2bIChiBahtqDEBRGGpB0kAdT0AJNAcp9ttTos1NStFKChrw6UBPKMazUBE5ArrayIfLi1E1A7mutable7alignedE_param_6];
        mov.u32     %r1, %tid.x;
        cvt.s64.s32     %rd5, %r1;
        mov.u32     %r2, %ntid.x;
        mov.u32     %r3, %ctaid.x;
        mul.wide.s32     %rd6, %r2, %r3;
        add.s64     %rd1, %rd6, %rd5;
        setp.lt.s64     %p1, %rd1, 1;
        setp.ge.s64     %p2, %rd1, %rd4;
        or.pred      %p3, %p1, %p2;
        @%p3 bra     $L__BB0_2;

        mul.lo.s64     %rd7, %rd1, %rd3;
        add.s64     %rd8, %rd7, %rd2;
        mov.u32     %r4, 1073741824;
        st.u32     [%rd8], %r4;
        sub.s64     %rd9, %rd7, %rd3;
        add.s64     %rd10, %rd9, %rd2;
        mov.u32     %r5, 1106247680;
        st.u32     [%rd10], %r5;

    $L__BB0_2:
        ret;

    }
    """  # noqa: E501
    test_fun = pnex_jit.ptx_to_extension(
        test_ptx,
        "hello_world",
        [pnex_jit.InputTensor("ree", "f32", (None,), mutable=True)],
        n_threads_expr="ree",
    )
    print(test_fun)
    a = torch.ones(6, device="cuda")
    print(a)
    out = test_fun(a)
    print(a)
    print(out)
    print("=" * 10)
    a[:] = -1
    print(a)
    out = test_fun(a)
    print(a)
    print(out)

    import timeit

    n_runs = 10_000
    print(
        timeit.timeit(
            """
test_fun(a)
torch.cuda.synchronize()
    """,
            globals=globals(),
            number=n_runs,
        )
        / n_runs
    )

if run_jit_ptx:

    @pnex_jit.jit(
        "hoooo",
        [
            pnex_jit.InputTensor("ree", "f32", (None, 3)),
            pnex_jit.OutputTensor("rawr", "f32", (("ree", 0), ("ree", 1), 2)),
        ],
        n_threads_expr="rawr",
    )
    def hoo(ree, rawr):
        idx = cuda.grid(1)
        y, x = divmod(idx, rawr.shape[0])
        if x < rawr.shape[0] and y < rawr.shape[1]:
            rawr[x, y, 0] = ree[x, y]
            rawr[x, y, 1] = ree[x, y] * 10

    print(hoo)

    a = torch.arange(12, device="cuda", dtype=torch.float32).reshape(4, 3)
    out2 = hoo(a)
    print(a)
    print(out2)
